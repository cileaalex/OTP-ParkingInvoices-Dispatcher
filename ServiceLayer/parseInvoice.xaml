<Activity mc:Ignorable="sap sap2010" x:Class="parseInvoice" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_supplier" Type="InArgument(x:String)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_pdfText" Type="InArgument(x:String)" />
    <x:Property Name="in_TransactionItem" Type="InArgument(x:String)" />
    <x:Property Name="in_read1" Type="InArgument(x:String)" />
    <x:Property Name="io_invoiceRow" Type="InOutArgument(sd:DataRow)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1208,1179</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>parseInvoice_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>CefSharp</x:String>
      <x:String>System.Globalization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.DocumentUnderstanding.ML.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>CefSharp</AssemblyReference>
      <AssemblyReference>CefSharp.BrowserSubprocess.Core</AssemblyReference>
      <AssemblyReference>CefSharp.Core</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="parseInvoice" sap:VirtualizedContainerService.HintSize="480,1114" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="438,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Start parseInvoice issued by &quot;+in_supplier]" />
    <TryCatch DisplayName="Try extract info from invoice" sap:VirtualizedContainerService.HintSize="438,891" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <Sequence sap:VirtualizedContainerService.HintSize="376,664" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#x9;Try&#xA;&#x9;io_invoiceRow(&quot;Supplier&quot;)=in_supplier&#xA;&#x9;io_invoiceRow(&quot;FileName&quot;)=path.GetFileName(in_TransactionItem)&#xA;&#x9;io_invoiceRow(&quot;globalTVA&quot;)=in_config(in_supplier+&quot;_globalTVA&quot;)&#xA;Catch ex As Exception&#xA;&#x9;Console.WriteLine(&quot;supplier&quot; + ex.Message)&#xA;&#x9;Throw ex&#xA;&#x9;End Try" DisplayName="Add to invoice Row the supplier, filename and globalTVA" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_TransactionItem">[in_TransactionItem]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_supplier">[in_supplier]</InArgument>
              <InArgument x:TypeArguments="sd:DataRow" x:Key="io_invoiceRow">[io_invoiceRow]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_config">[in_Config]</InArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
          <ui:InvokeCode Code="Try&#xD;&#xA;Dim extractedVal As String&#xD;&#xA;Dim dateOfInvoice As Datetime &#xD;&#xA;Dim paramList As String()=Split(in_Config(&quot;param&quot;).ToString,&quot;|&quot;)&#xD;&#xA;For Each param As String In paramList&#xD;&#xA;io_pdfText=io_pdfText.ToLower&#xD;&#xA;&#xD;&#xA;&#x9;'console.WriteLine(param)&#xD;&#xA;&#x9;'supplier has param&#xD;&#xA;&#x9;If in_Config.ContainsKey(in_supplier+param)&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;extractedVal = System.Text.RegularExpressions.regex.Match(io_pdfText.ToLower,in_Config(in_supplier+param).ToString).Value.Trim&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If(String.IsNullOrEmpty(extractedVal))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (param.Contains(&quot;TotalDePlata&quot;) Or param.Contains(&quot;ValoareTVA&quot;))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal= formatToDouble(extractedVal).ToString&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Formatting data to dd.MM.yyyy&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (param.Contains(&quot;Data&quot;))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Dim formats() As String = {&quot;M/d/yyyy&quot;,&quot;d/M/yyyy&quot;,&quot;M-d-yyyy&quot;,&quot;d-M-yyyy&quot;,&quot;d-MMM-yy&quot;,&quot;dd.MM.yyyy&quot;,&quot;MM.dd.yyyy&quot;,&quot;yyyy/MM/dd&quot;,&quot;dd MMM yyyy&quot;,&quot;yy/MM/dd&quot;,&quot;yy.MM.dd&quot;,&quot;yy-MM-dd&quot;,&quot;YY/bM/bd&quot;,&quot;bM/bD/YY&quot;,&quot;bD/bM/YY&quot;,&quot;Mon-dd-yyyy&quot;,&quot;DD-Mon-yyyy&quot;,&quot;D Month, Yr&quot;,&quot;yyyy.MM.dd, dd MMMM yyyy&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Dim dateValue As datetime &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (param.tolower.Contains(&quot;factura&quot;))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If(datetime.TryParseExact(extractedVal, formats, System.Globalization.CultureInfo.InvariantCulture,system.Globalization.DateTimeStyles.None,dateValue))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=dateValue.ToString(&quot;dd.MM.yyyy&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dateOfInvoice = dateValue&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If(datetime.TryParseExact(extractedVal, formats, System.Globalization.CultureInfo.InvariantCulture,system.Globalization.DateTimeStyles.None,dateValue))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=dateValue.ToString(&quot;dd.MM.yyyy&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If(String.IsNullOrEmpty(dateOfInvoice.ToString) And String.IsNullOrEmpty(extractedVal))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If(Not String.IsNullOrEmpty(extractedVal))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(regex.Match(extractedVal,&quot;\d+&quot;).Value)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=dateOfInvoice.AddDays(CInt(regex.Match(extractedVal,&quot;\d+&quot;).Value)).ToString(&quot;dd.MM.yyyy&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Else &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;'supplier does not have param&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;Else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;extractedVal=&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;console.Out.WriteLine(in_supplier+param+&quot;        &quot;+ extractedVal.ToUpper)&#xD;&#xA;&#x9;&#x9;'add extracted val to datarow&#xD;&#xA;&#x9;&#x9;io_invoiceRow(param.Replace(&quot;_&quot;,&quot;&quot;))=extractedVal.ToUpper&#xD;&#xA;&#x9;&#x9;io_pdfText=io_pdfText.ToLower&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;Next&#xD;&#xA;Catch e As Exception&#xD;&#xA;&#x9;console.WriteLine(e.Message)&#xD;&#xA;&#x9;Throw e&#xD;&#xA;End Try&#xD;&#xA;End Sub &#xD;&#xA;&#xD;&#xA;Private Function formatToDouble(stringToBeProcessed As String) As Double&#xD;&#xA;&#xD;&#xA;    Dim valueAsString As String = StringToBeProcessed.Replace(&quot; &quot;, &quot;&quot;).Trim()&#xD;&#xA;    Console.WriteLine(valueAsString)&#xD;&#xA;    Dim integerPart As String = Regex.Match(valueAsString, &quot;(\d+\W?)+(?=\W\d{2}$)&quot;).Value&#xD;&#xA;    integerPart = Regex.Replace(integerPart, &quot;\W&quot;, &quot;&quot;)&#xD;&#xA;    Dim decimalPart As String = Regex.Match(valueAsString, &quot;\d{2}$&quot;).Value&#xD;&#xA;    Console.WriteLine(integerPart)&#xD;&#xA;    Console.WriteLine(decimalPart)&#xD;&#xA;&#xD;&#xA;    If StringToBeProcessed.Contains(&quot;-&quot;) Then&#xD;&#xA;        valueAsString = &quot;-&quot; &amp; integerPart &amp; &quot;.&quot; &amp; decimalPart&#xD;&#xA;    Else&#xD;&#xA;        valueAsString = integerPart &amp; &quot;.&quot; &amp; decimalPart&#xD;&#xA;    End If&#xD;&#xA;&#xD;&#xA;    Dim valueAsDbl As Double = Convert.ToDouble((valueAsString))&#xD;&#xA;    Console.WriteLine(valueAsDbl.ToString(&quot;F&quot;, System.Globalization.CultureInfo.InvariantCulture))&#xD;&#xA;&#x9;Return valueAsDbl&#xD;&#xA;&#xD;&#xA;End Function&#xD;&#xA;&#xD;&#xA;Sub F()" ContinueOnError="True" DisplayName="Add CIF, IBAN, InvoiceNo, InvoiceDate, Currency, etc" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_supplier">[in_supplier]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
              <InOutArgument x:TypeArguments="x:String" x:Key="io_pdfText">[in_pdfText]</InOutArgument>
              <InOutArgument x:TypeArguments="sd:DataRow" x:Key="io_invoiceRow">[io_invoiceRow]</InOutArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xD;&#xA;Dim extractedVal As String&#xD;&#xA;Dim param As String &#xD;&#xA;param = in_Config(&quot;paramServicii&quot;).ToString&#xD;&#xA;&#xD;&#xA;io_pdfText=Regex.Replace(io_pdfText.ToLower,&quot;\r\n&quot;,in_Config(&quot;newLineReplace&quot;).ToString)&#xD;&#xA;Console.WriteLine(io_pdfText.ToLower)&#xD;&#xA;Dim tableText1 As String&#xD;&#xA;&#xD;&#xA;tableText1=Regex.match(io_pdfText,in_Config(in_supplier+in_Config(&quot;tableText&quot;).ToString+in_read).ToString).Value&#xD;&#xA;tableText1=Regex.Replace(tableText1,in_Config(&quot;newLineReplace&quot;).ToString,Environment.NewLine).Trim&#xD;&#xA;&#xD;&#xA;'console.WriteLine(tableText1)&#xD;&#xA;If (not String.IsNullOrEmpty(tableText1))&#xD;&#xA;&#x9;For Each Match As Match  In Regex.Matches(tableText1,in_Config(in_supplier+in_Config(&quot;paramServicii&quot;).ToString+in_read).ToString)&#xD;&#xA;&#x9;&#x9;If(Not String.IsNullOrEmpty(Match.ToString))&#xD;&#xA;&#x9;&#x9;&#x9;io_invoiceRow(&quot;Servicii&quot;)=io_invoiceRow(&quot;Servicii&quot;).ToString+vbNewLine + Match.ToString&#xD;&#xA;&#x9;&#x9;&#x9;Console.WriteLine(Match.ToString)&#x9;&#xD;&#xA;&#x9;&#x9;Else&#xD;&#xA;&#x9;&#x9;&#x9;Console.WriteLine(Match.ToString)&#xD;&#xA;&#x9;&#x9;&#x9;io_invoiceRow(&quot;Servicii&quot;)=&quot;-&quot;&#xD;&#xA;&#x9;&#x9;End If&#xD;&#xA;&#x9;Next&#xD;&#xA;Else &#xD;&#xA;&#x9;io_invoiceRow(&quot;Servicii&quot;)=&quot;-&quot;&#xD;&#xA;&#x9;Console.writeline(&quot;someting2&quot;)&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;Catch e As Exception&#xD;&#xA;&#x9;console.WriteLine(&quot;Invoice services threw &quot; + e.Message)&#xD;&#xA;&#x9;Throw e&#xD;&#xA;End Try" DisplayName="Add Servicii" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_supplier">[in_supplier]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
              <InOutArgument x:TypeArguments="x:String" x:Key="io_pdfText">[in_pdfText]</InOutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_read">[in_read1]</InArgument>
              <InOutArgument x:TypeArguments="sd:DataRow" x:Key="io_invoiceRow">[io_invoiceRow]</InOutArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence DisplayName="cannot extract info" sap:VirtualizedContainerService.HintSize="426,311" sap2010:WorkflowViewState.IdRef="Sequence_5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:MoveFile ContinueOnError="{x:Null}" Destination="[Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop),in_Config(&quot;unprocFolder&quot;).ToString+&quot;\&quot;+in_TransactionItem.Split(&quot;\&quot;c)(in_TransactionItem.split(&quot;\&quot;c).Length-1))]" DisplayName="Move to unproc" sap:VirtualizedContainerService.HintSize="384,157" sap2010:WorkflowViewState.IdRef="MoveFile_2" Overwrite="True" Path="[in_TransactionItem]" />
              <Throw DisplayName="Throw bre unknown invoice" Exception="[new BusinessRuleException(in_Config(&quot;BRE_unknownInvoiceFormat&quot;).ToString)]" sap:VirtualizedContainerService.HintSize="384,22" sap2010:WorkflowViewState.IdRef="Throw_1" />
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>